<?php

/**
 * {\Carrot\Core} Dependency Registration File.
 * 
 * >> DO NOT EDIT THIS FILE, DUPLICATE INSTEAD, READ UP FIRST <<
 *
 * Registers the dependencies of the core bundle of Carrot framework.
 * This file is defines default dependencies between core classes
 * used by Carrot, so please do not edit it.
 *
 * If you want to customize this file, duplicate it, place it in
 * a directory outside of 'Carrot' vendor folder (you might want
 * to rename it as well) - and set the registration file path to
 * point to that duplicate (in /registrations.php). That way this
 * file will be ignored, and you don't have to worry about your
 * registrations being replaced in an update.
 *
 */

/**
 * \Carrot\Core\Classes\Router:main
 * 
 * Default router class used by Carrot. It uses the default Request
 * and Session class. You can replace the dependencies to your custom
 * Session and Request class, but you have to implement the appropriate
 * interfaces. You can even skip the default router altogether and
 * create your own Router class by editing \config.php. 
 * 
 */

$dic->register('\Carrot\Core\Classes\Router:main', function($dic)
{	
	return new \Carrot\Core\Classes\Router
	(
		$dic->getInstance('\Carrot\Core\Classes\Request:shared'),
		$dic->getInstance('\Carrot\Core\Classes\Session:shared')
	);
});

/**
 * \Carrot\Core\Classes\ErrorHandler:shared
 * 
 * The default error handler class used by Carrot. You can change the
 * path to the templates used (standard PHP template file) if you want.
 * You can also set error displays on or off. See documentation for
 * details.
 *
 * Since there is no point of having more than one error handler class,
 * we save an instance of it as shared.
 *
 */

$dic->register('\Carrot\Core\Classes\ErrorHandler:shared', function($dic)
{	
	$error_handler = new \Carrot\Core\Classes\ErrorHandler
	(
		$dic->getInstance('\Carrot\Core\Classes\Request:shared')->getServer('SERVER_PROTOCOL'),
		TRUE
	);
	
	$dic->saveShared('\Carrot\Core\Classes\ErrorHandler:shared', $error_handler);
	return $error_handler;
});

/**
 * \Carrot\Core\Classes\Request:shared
 *
 * The primary request class, to be shared across the framework. Router depends
 * on this class, but you can change it to depend on your own Request class.
 *
 */
 
$dic->register('\Carrot\Core\Classes\Request:shared', function($dic)
{
	$object = new \Carrot\Core\Classes\Request
	(
		$_SERVER,
		$_GET,
		$_POST,
		$_FILES,
		$_COOKIE,
		$_REQUEST,
		$_ENV
	);
	
	$dic->saveShared('\Carrot\Core\Classes\Request:shared', $object);
	
	return $object;
});

/**
 * \Carrot\Core\Classes\Session:shared
 *
 * Wrapper for the global $_SESSION variable. We wrap session inside
 * this class so we can mock it easily if we wanted to. 
 *
 */

$dic->register('\Carrot\Core\Classes\Session:shared', function($dic)
{
	$session = new \Carrot\Core\Classes\Session($_SESSION);
	$dic->saveShared('\Carrot\Core\Classes\Session:shared', $session);
	return $session;
});

/**
 * \Carrot\Core\Classes\Response:main
 *
 * 
 *
 */

$dic->register('\Carrot\Core\Classes\Response:main', function($dic)
{
	return new \Carrot\Core\Classes\Response
	(
		$dic->getInstance('\Carrot\Core\Classes\Request:shared')->getServer('SERVER_PROTOCOL')
	);
});

/**
 * \Carrot\Core\Classes\SampleController:main
 *
 * 
 *
 */

$dic->register('\Carrot\Core\Classes\SampleController:main', function($dic)
{	
	return new \Carrot\Core\Classes\SampleController
	(
		$dic->getInstance('\Carrot\Core\Classes\Request:shared')
	);
});