TRUNK
-----

- Added Carrot\Form
- Added Carrot\Validation
- Added Carrot\Message


VERSION 0.2.7
-------------

- Renamed Carrot\Core\Dispatch to Carrot\Core\Callback.
    - Moved call_user_func_array() logic to the Callback class itself, adhering to tell, don't ask principle
- Removed FrontController, simplified Carrot\Core\System::run() method.
- Added Carrot\Core\EventDispatcher for simple handling of core events
    - Allows user to run specific routines when an event occurs
    - Arguments sent are determined by the notifier
    - Added event: Carrot.Core.System:EventDispatcherReady
    - Added event: Carrot.Core.System:RouterReady
    - Added event: Carrot.Core.System:RoutingCompleted
- Session Package
    - Carrot\Session is going to be another package
    - Added Carrot\Core\Session for simple native session wrapper
- Carrot\Core\Router
    - Added Carrot\Core\RouteRegistrations to handle route registrations
        - Allows quick creation of Carrot\Core\BasicRoute object, removing the need to code boilerplate route classes
        - Coupled with the DIC as it has the responsibility of creating the route objects
        - Allows Router to lazy-load route objects as needed
    - Router and DIC are now decoupled.
    - Added getActiveRouteID()
    - Added getActiveCallback()
    - Added getAllRegisteredRouteIDs()
- Carrot\Core\Interfaces\RouteInterface
    - getURL() is now getRelativePath(), base path is appended as a prefix by Router object
    - Added setID(), which is called by RouteRegistration after it has instantiated the route object
- Carrot\Core\Database\MySQLiWrapper now ready to use
- Carrot\Core\AppRequestURI
    - Now has singleton lifecycle
    - Now handles base path and base URL
    - Added getBaseURL()
    - Added segmentMatches()
    - Added segmentStartsWith()
- Carrot\Core\Request
    - Now has singleton lifecycle
    - Now has get*OrReturnDefault() methods
    - Added isPostRequest()
    - Added isGetRequest()
    - Less sucky now because each get* methods return NULL when index doesn't exist.
- Carrot\Core\System now returns the response instead of sending it immediately.
- Some other changes
- Fixed some bugs

VERSION 0.2.6
-------------

- Refactored index.php to Carrot\Core\System
- Exception handling
    - Carrot\Core\ExceptionHandlerManager is the primary exception handler
    - The manager dispatches the exception to appropriate exception handler classes
    - Exception handler classes implement Carrot\Core\Interfaces\ExceptionHandlerInterface
    - Exception handlers are registered to the manager and bound to a specific exception class
- Changed Carrot\Core\Destination to Carrot\Core\Dispatch
    - Changed Carrot\Core\Destination::getRoutineMethodName() to Carrot\Core\Dispatch::getMethodName()
- Router
    - Changed Carrot\Core\Router::getDestination() to Carrot\Core\Router::doRouting()
    - Changed Carrot\Core\Interfaces\RouteInterface::getDestination() to Carrot\Core\Interfaces\RouteInterface::route()


VERSION 0.2.5
-------------

- Dependency Injection Container
    - Created ObjectReference to refer to instance names.
    - Instance names now in this form: Carrot\Core\FrontController{Main:Transient}
    - Providers can be bound only to specific instance names.
    - Simplified ProviderInterface.
- Router
    - Simplified RouteInterface.
    - Simplified Router.
    - Route classes now instantiated by the DIC, means they can have their own dependencies.
    - Removed RouterInterface, usage of Carrot's Router class is now mandatory.
- Response
    - Headers are now only sent when Response::send() is called.
    - Response now a value object.
- FrontController
    - Internal redirection is back, but without redirection history and maximum redirection count.


VERSION 0.2
-----------

- Refactored spaghetti index.php to \Carrot\Core\FrontController.
- User's controller are no longer called controller, it is called routine class/object. The method to be called is called 'routine method'. This removes ambiguity in Carrot's documentation. Carrot doesn't care if the routine class is controller, view, model, etc., so the term 'controller' is misleading.
- Removed config.php, all configurations now done in provider files
- Dependency Injection Container
    - Decouples the DIC from the responsibility of loading the class files.
    - Removed mandatory usage of PSR-0 'Vendor\Namespace' namespace pattern.
    - Removed the concept of 'default dependency registration files', _dicregistrations.php now gone.
    - Configurations are now stored inside separate provider classes.
    - Explicit assignment of providers to a particular class.
    - You can no longer inject the (currently used) DIC instance to any class.
- Router
    - Each route now is a separate class, implementing RouteInterface.
    - Supports two way routing, no longer uses chain of responsibility pattern.
- Session
    - Renamed to Carrot\Session\NativeSession.
- Database
    - Added Carrot\Database\MySQLiStatementWrapper.
- SimpleDocs
    - Used for sample application and showing the docs.
- ExceptionHandling
    - Every errors now turned into ErrorException.


VERSION 0.1
-----------

- DependencyInjectionContainer
    - Loads default dependency registration files '_dicregistrations.php'
    - Enforces the usage of PSR-0, throws exception when class does not use it
    - Does not support class placement other than /vendors
- Router
    - Uses simplified version of chain of responsibility pattern