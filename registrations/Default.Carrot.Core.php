<?php

/**
 * Dependency registration file for {\Carrot\Core}
 *
 * Registers the dependencies of Carrot framework's core classes.
 * This file is defines default dependencies between core classes
 * used by Carrot.
 * 
 * >> READ BEFORE EDITING THIS FILE <<
 * 
 * If you can, do not edit this file directly, if you wish to change
 * something, duplicate this file and have your /registrations.php
 * point to the duplicated file. We suggest 'Carrot.Core.php' as a
 * file name. Edit the duplicated file instead. That way you can
 * keep this file as reference when editing.
 *
 */

/**
 * \Carrot\Core\FrontController@main
 *
 * As a rule of a thumb, this class is the ONLY class where it is okay to have
 * the DIC injecting itself via constructor. This is because the FrontController
 * actually needs the to instantiate user's controller - it does not know which
 * controller to instantiate. If you find that you need to inject DIC, consider
 * creating a Factory class instead.
 * 
 * @param RouterInterface $router Instance of an implementation of RouterInterface.
 * @param ErrorHandlerInterface $error_handler Instance of an implementation of ErrorHandlerInterface.
 * @param DependencyInjectionContainer $dic Carrot's default dependency injection container.
 * 
 */

$dic->register('\Carrot\Core\FrontController@main', function($dic)
{
    return new \Carrot\Core\FrontController
    (
        $dic->getInstance('\Carrot\Core\Router@shared'),
        $dic->getInstance('\Carrot\Core\ErrorHandler@main'),
        $dic
    ); 
});

/**
 * \Carrot\Core\Router@main
 * 
 * You can edit routing parameters here. You can also change the default destination
 * to go to when there is no matching route.
 *
 * This object is shared because it might be needed by user's templates to call
 * Router::generateURL(), we don't want to load the routes twice.
 * 
 * @param array $params Routing parameters to be passed to the anonymous functions.
 * @param Destination $no_matching_route_destination Default destination to return when there is no matching route.
 * @param string $routes_file_path Absolute path to the file that contains the routes.
 * 
 */

$dic->register('\Carrot\Core\Router@shared', function($dic)
{   
    // Destination to go to when there is no matching route
    $no_matching_route_destination = new \Carrot\Core\Destination('\Carrot\Core\Controllers\NoMatchingRouteController@main', 'index');
    
    // Parameters to pass to the anonymous functions, get any object you want with DIC
    $params = array
    (
        'request' => $dic->getInstance('\Carrot\Core\Request@shared'),
        'uri_segments' => $dic->getInstance('\Carrot\Core\Request@shared')->getAppRequestURISegments()
    );
    
    // Absolute path to the file that contains the routes
    $routes_file_path = dirname(__DIR__) . DIRECTORY_SEPARATOR . 'routes.php';
    $router =  new \Carrot\Core\Router($params, $no_matching_route_destination, $routes_file_path);
    $dic->saveShared('\Carrot\Core\Router@shared', $router);
    return $router;
});

/**
 * \Carrot\Core\ErrorHandler@main
 * 
 * Carrot's default ErrorHandler class. You can change the templates used by it
 * by filling the appropriate parameter with an absolute template file path.
 *
 * @param string $server_protocol Either 'HTTPS 1.0' or 'HTTP 1.1', used to set the status code to 500.
 * @param bool $development_mode Optional. When set to false, will use production error/exception templates, otherwise will use development error/exception templates.
 * @param string $error_template Optional. Absolute path to the production error template. Used when ErrorHandler::development_mode is false.
 * @param string $exception_template Optional. Absolute path to the production uncaught exception template. Used when ErrorHandler::development_mode is false. 
 * @param string $error_template_div Optional. Absolute path to the development error template. Used when ErrorHandler::development_mode is true.
 * @param string $exception_template_div Optional. Absolute path to the development uncaught exception template. Used when ErrorHandler::development_mode is true.
 *
 */

$dic->register('\Carrot\Core\ErrorHandler@main', function($dic)
{   
    return new \Carrot\Core\ErrorHandler
    (
        $dic->getInstance('\Carrot\Core\Request@shared')->getServer('SERVER_PROTOCOL'),
        true
    );
});

/**
 * \Carrot\Core\Request@shared
 *
 * Carrot's default Request class, to be shared across the framework. Default
 * configuration doesn't include $base_path parameter, it is guessed automatically
 * by the framework. However for security reasons, it is recommended that you 
 * hard code the base path. This object is immutable, you cannot use it to change
 * values of the superglobals it contains.
 *
 * Base path is the relative path from server root to the folder where the front
 * controller is located. If the front controller is in the server root, it simply
 * returns '/'. Base path should contain starting and trailing slash.
 *
 * We save its instance as shared since there is no point in creating two different
 * instances. It will probably be needed by various classes, ranging from Router to
 * user's controller.
 *
 * @param array $server $_SERVER variable.
 * @param array $get $_GET variable.
 * @param array $post $_POST variable.
 * @param array $files $_FILES variable.
 * @param array $cookie $_COOKIE variable.
 * @param array $request $_REQUEST variable.
 * @param array $env $_ENV variable.
 * @param string $base_path Optional. Base path, with starting and trailing slash.
 *
 */
 
$dic->register('\Carrot\Core\Request@shared', function($dic)
{
    $object = new \Carrot\Core\Request
    (
        $_SERVER,
        $_GET,
        $_POST,
        $_FILES,
        $_COOKIE,
        $_REQUEST,
        $_ENV
    );
    
    $dic->saveShared('\Carrot\Core\Request@shared', $object);
    
    return $object;
});

/**
 * \Carrot\Core\Response@main
 * 
 * Carrot's default Response class. It implements ResponseInterface so you can use
 * it as a return value to the front controller..
 *
 * @param string $server_protocol Used when setting the response code, either 'HTTP/1.0' or 'HTTP/1.1'.
 *
 */

$dic->register('\Carrot\Core\Response@main', function($dic)
{
    return new \Carrot\Core\Response
    (
        $dic->getInstance('\Carrot\Core\Request@shared')->getServer('SERVER_PROTOCOL')
    );
});

/**
 * \Carrot\Core\Controllers\NoMatchingRouteController@main
 *
 * Carrot's default 'Http 404 Page Not Found' controller.
 * 
 * @param Response $response Instance of \Carrot\Core\Response
 *
 */

$dic->register('\Carrot\Core\Controllers\NoMatchingRouteController@main', function($dic)
{
    return new \Carrot\Core\Controllers\NoMatchingRouteController
    (
        $dic->getInstance('\Carrot\Core\Response@main')
    );
});

/**
 * \Carrot\Core\Controllers\WelcomeController@main
 *
 * Carrot's controller that displays the welcome page.
 * 
 * @param Request $request Instance of \Carrot\Core\Request.
 * @param Response $response Instance of \Carrot\Core\Response.
 * @param string $root_directory Path to the framework's root directory, without trailing slash.
 *
 */

$dic->register('\Carrot\Core\Controllers\WelcomeController@main', function($dic)
{
    return new \Carrot\Core\Controllers\WelcomeController
    (
        $dic->getInstance('\Carrot\Core\Request@shared'),
        $dic->getInstance('\Carrot\Core\Response@main'),
        dirname((__DIR__)) . DIRECTORY_SEPARATOR . 'vendors'
    );
});